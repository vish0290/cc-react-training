0: Is JavaScript single threaded or multithreaded? What does it mean to be any?
Ans: Javascript is a single threaded because one statement is executed at a time

1: What are promises? Why are they used?
Ans: Promise are like the statement given which evetually return a value (fullfilled ,rejected) initially if no resolve or reject is declared the promise will be in pending.

2: What do async/await do? Explain it in your own words.
Ans: async is used to return the  value from the promise
     await is the metho for the promise which will wait for the promise to settele and then print the result 

3: How do we catch errors in async functions?
Ans: using the catch() all the exception handling is done.

4: What do async functions return?
Ans: async function will return the value from the promise

5: What do then() consumers in promises return?
Ans: then() is a function which is used to return the value from promise 

6: Write the explicit equivalent of Promise.resolve(100);
Ans:const call = () =>{
    return new Promise((resolve,reject) =>{
        resolve(100)
    })};

7: What are the states a promise can be in?
Ans: pending
     fullfilled
     rejected
8: What happens if neither resolve nor reject is called within a promise?
Ans: it will stay in the pending state.

9: What happens if multiple resolve or reject is called within a promise?
Ans: It will only accept one resolve or reject moreover it will accept the first one only. (first come first serve).

10: What does the finally() method on promise do? Provide your explanation.
Ans: finally() is executed when the promise is done with its part which means when thw promise is settled then the finally() is executed, this can be used to do some clean up stuff or process when the promise is settled.

11: What are microtasks in JS?
Ans:microtask is the short function which are executed after the function

12: Write a simple print() function that accepts a callback, which gets called after 3 seconds. The callback function could be anything that prints out on the screen.
Ans:function call(x,y,z){
        console.log(x)
        z(y);
    }
    function dis(value){
        setTimeout(()=>{console.log(value);},3000)
    }
    call('hello','there',dis)

13: Delay with a promise

We know that setTimeout() uses a callback.
Create a promise based alternative.

The function named delay(ms) should return a promise.

We should be able to achieve something like this:

delay(3000).then(() => alert('Should alert after 3 seconds'))

Ans: function delay(ms) {
    let mess = "How are you"
    setTimeout(()=>{display(mess);},ms)
}
function display(mess){
 console.log(mess)
}
delay(3000)

14: Consume the following promise using `await`.

let promise = new Promise((res,rej) => {
setTimeout(() => res("Resolved!"),3000)
} );

promise.then((res) => alert("Response value is: " + res)); // this line needs to get replaced.
Ans:let value = await promise;
    console.log(value) 

15: What is the difference between the following two lines of code:
promise.then(f1).catch(f2);
and
promise.then(f1, f2);
Provide an explanation for your answer.
Ans: Let's consider f1 as succcess and f2 as fail. In the type 1 that is promise.then(f1).catch(f2) is better when comapred to promise.then(f1,f2) because lets have a small sceneario in which we are expecting invalid succcess callback we want the exception to be handled,In the promise.then(f1,f2) the f1 callback is returened and the error is not envoked whereas in the promise.then().catch() the error callback is envoked it will be caught by the .catch(error).  
